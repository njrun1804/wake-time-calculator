name: ES6 Module Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    name: 🧪 Unit Tests - ${{ matrix.module_group }}
    strategy:
      fail-fast: false
      matrix:
        module_group:
          - { name: "Core Modules", pattern: "tests/unit/calculator.test.js tests/unit/storage.test.js tests/unit/time.test.js", browser: "chromium" }
          - { name: "UI Modules", pattern: "tests/unit/ui.test.js", browser: "chromium" }
          - { name: "Weather Modules", pattern: "tests/unit/weather.test.js tests/unit/location.test.js tests/unit/dawn.test.js", browser: "chromium" }
          - { name: "Cross-Browser Core", pattern: "tests/unit/calculator.test.js", browser: "firefox" }
          - { name: "Cross-Browser Core", pattern: "tests/unit/calculator.test.js", browser: "webkit" }

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.module_group.browser }}

    - name: Run unit tests for ${{ matrix.module_group.name }}
      run: |
        echo "Running unit tests for ${{ matrix.module_group.name }} on ${{ matrix.module_group.browser }}"
        npx playwright test ${{ matrix.module_group.pattern }} --project=${{ matrix.module_group.browser }}
      env:
        CI: true

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.module_group.name }}-${{ matrix.module_group.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30

  module-isolation-tests:
    runs-on: ubuntu-latest
    name: 🔬 Module Isolation Tests
    needs: unit-tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Create module isolation test
      run: |
        cat > tests/module-isolation.spec.js << 'EOF'
        import { test, expect } from '@playwright/test';

        test.describe('Module Isolation and Loading', () => {
          test('core modules can be imported independently', async ({ page }) => {
            // Test that core modules don't have circular dependencies
            const moduleTest = await page.evaluate(async () => {
              try {
                // Test calculator module isolation
                const calcModule = await import('/js/core/calculator.js');
                if (!calcModule.calculateWakeTime) {
                  throw new Error('Calculator module missing expected export');
                }

                // Test storage module isolation
                const storageModule = await import('/js/core/storage.js');
                if (!storageModule.save || !storageModule.load) {
                  throw new Error('Storage module missing expected exports');
                }

                // Test constants module isolation
                const constantsModule = await import('/js/core/constants.js');
                if (!constantsModule.DEFAULT_VALUES) {
                  throw new Error('Constants module missing expected export');
                }

                return { success: true };
              } catch (error) {
                return { success: false, error: error.message };
              }
            });

            expect(moduleTest.success).toBe(true);
            if (!moduleTest.success) {
              console.log('Module isolation error:', moduleTest.error);
            }
          });

          test('weather modules load correctly for full modular', async ({ page }) => {
            await page.goto('/index-full-modular.html');
            await page.waitForLoadState('networkidle');

            const weatherModuleTest = await page.evaluate(async () => {
              try {
                // Test weather module
                const weatherModule = await import('/js/modules/weather.js');
                if (!weatherModule.fetchWeatherData) {
                  throw new Error('Weather module missing expected export');
                }

                // Test location module
                const locationModule = await import('/js/modules/location.js');
                if (!locationModule.detectLocation) {
                  throw new Error('Location module missing expected export');
                }

                // Test dawn module
                const dawnModule = await import('/js/modules/dawn.js');
                if (!dawnModule.checkDaylightNeeded) {
                  throw new Error('Dawn module missing expected export');
                }

                return { success: true };
              } catch (error) {
                return { success: false, error: error.message };
              }
            });

            expect(weatherModuleTest.success).toBe(true);
            if (!weatherModuleTest.success) {
              console.log('Weather module error:', weatherModuleTest.error);
            }
          });

          test('modules handle missing dependencies gracefully', async ({ page }) => {
            await page.goto('/index-modular.html');
            await page.waitForLoadState('networkidle');

            // Test that basic modular doesn't try to load weather modules
            const dependencyTest = await page.evaluate(() => {
              // Should not have weather awareness functions
              return {
                hasWeatherFunctions: typeof window.fetchWeatherData !== 'undefined',
                hasLocationFunctions: typeof window.detectLocation !== 'undefined',
                hasCoreCalculator: typeof window.calculateWakeTime !== 'undefined'
              };
            });

            // Basic modular should have core but not weather
            expect(dependencyTest.hasCoreCalculator).toBe(true);
            expect(dependencyTest.hasWeatherFunctions).toBe(false);
            expect(dependencyTest.hasLocationFunctions).toBe(false);
          });
        });
        EOF

    - name: Run module isolation tests
      run: npx playwright test tests/module-isolation.spec.js --project=chromium
      env:
        CI: true

  performance-unit-tests:
    runs-on: ubuntu-latest
    name: ⚡ Module Performance Tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps chromium

    - name: Create module performance test
      run: |
        cat > tests/module-performance.spec.js << 'EOF'
        import { test, expect } from '@playwright/test';

        test.describe('Module Performance', () => {
          test('core calculation functions perform efficiently', async ({ page }) => {
            await page.goto('/index-modular.html');
            await page.waitForLoadState('networkidle');

            const perfTest = await page.evaluate(async () => {
              const start = performance.now();

              // Run 100 calculations to test performance
              for (let i = 0; i < 100; i++) {
                // Simulate typical calculation
                const meetingTime = '08:00';
                const runMinutes = 45;
                const breakfastMinutes = 20;
                const travelMinutes = 15;

                // This should be fast
                const result = await window.calculateWakeTime(
                  meetingTime, runMinutes, breakfastMinutes, travelMinutes
                );
              }

              const end = performance.now();
              return end - start;
            });

            console.log(`100 calculations took ${perfTest}ms`);
            expect(perfTest).toBeLessThan(1000); // Should be under 1 second
          });

          test('module loading time is reasonable', async ({ page }) => {
            const loadStart = Date.now();

            await page.goto('/index-full-modular.html');
            await page.waitForLoadState('networkidle');

            // Verify all modules loaded
            const moduleCheck = await page.evaluate(() => {
              return {
                hasCalculator: typeof window.calculateWakeTime !== 'undefined',
                hasWeather: typeof window.fetchWeatherData !== 'undefined',
                hasLocation: typeof window.detectLocation !== 'undefined'
              };
            });

            const loadTime = Date.now() - loadStart;
            console.log(`Full modular app loaded in ${loadTime}ms`);

            expect(moduleCheck.hasCalculator).toBe(true);
            expect(moduleCheck.hasWeather).toBe(true);
            expect(moduleCheck.hasLocation).toBe(true);
            expect(loadTime).toBeLessThan(3000); // Should load in under 3 seconds
          });
        });
        EOF

    - name: Run module performance tests
      run: npx playwright test tests/module-performance.spec.js --project=chromium
      env:
        CI: true

  unit-test-summary:
    runs-on: ubuntu-latest
    name: 📊 Unit Test Summary
    needs: [unit-tests, module-isolation-tests, performance-unit-tests]
    if: always()

    steps:
    - name: Generate unit test report
      run: |
        echo "# 🧪 ES6 Module Unit Test Results"
        echo ""
        echo "Test Results:"
        echo "  • Unit Tests: ${{ needs.unit-tests.result }}"
        echo "  • Module Isolation: ${{ needs.module-isolation-tests.result }}"
        echo "  • Performance Tests: ${{ needs.performance-unit-tests.result }}"
        echo ""

        if [[ "${{ needs.unit-tests.result }}" == "success" ]] && \
           [[ "${{ needs.module-isolation-tests.result }}" == "success" ]] && \
           [[ "${{ needs.performance-unit-tests.result }}" == "success" ]]; then
          echo "🎉 All ES6 module tests passed!"
          echo ""
          echo "✅ Core modules: Pure functions tested and verified"
          echo "✅ UI modules: DOM interaction utilities tested"
          echo "✅ Weather modules: API integration and data processing tested"
          echo "✅ Module isolation: Independent loading and no circular dependencies"
          echo "✅ Performance: Module loading and calculation efficiency verified"
        else
          echo "❌ One or more module tests failed"
          echo "Please review the test logs for specific issues"
          exit 1
        fi